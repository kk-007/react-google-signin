{"version":3,"sources":["actions/auth.js","App.js","serviceWorker.js","reducers/index.js","reducers/auth.js","index.js"],"names":["handleSignInError","err","console","log","window","alert","App","dispatch","useDispatch","auth","useSelector","state","useEffect","gapi","load","auth2","init","client_id","scope","isSignIn","Name","onClick","a","getAuthInstance","signOut","type","signIn","user","payload","getBasicProfile","getName","Id","getId","Email","getEmail","error","Boolean","location","hostname","match","combineReducers","action","Promise","res","rej","then","ReactDOM","render","store","createStore","RootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"8OAAMA,EAAoB,SAAAC,GAEtB,OADAC,QAAQC,IAAIF,GACLA,GACL,IAAK,uBACHG,OAAOC,MAAM,wBACb,MACF,IAAK,gBACHD,OAAOC,MAAM,iCACb,MACF,IAAK,2BACHD,OAAOC,MAAM,uCACb,MACF,QACED,OAAOC,MAAM,kBCSNC,MAnBf,WACE,IAAIC,EAAWC,cACXC,EAAOC,aAAY,SAAAC,GAAK,OAAEA,KAAOF,KASrC,OARAG,qBAAU,WACRR,OAAOS,KAAKC,KAAK,gBAAe,WAC9BV,OAAOS,KAAKE,MAAMC,KAAK,CACrBC,UAAU,2EACVC,MAAM,iBAGV,IAEA,6BACGT,EAAKU,SAAS,WAAWV,EAAKW,KAAK,GACnCX,EAAKU,SAAS,4BAAQE,QAAS,kBAAId,EDmBtC,uCAAO,WAAMA,GAAN,SAAAe,EAAA,sEACGlB,OAAOS,KAAKE,MAAMQ,kBAAkBC,UADvC,OAEHjB,EAAS,CACLkB,KAAK,aAHN,2CAAP,yDCnBiB,YAA4D,4BAAQJ,QAAS,kBAAId,EDClG,uCAAO,WAAMA,GAAN,eAAAe,EAAA,+EAEkBlB,OAAOS,KAAKE,MAAMQ,kBAAkBG,SAFtD,OAEKC,EAFL,OAGCpB,EAAS,CACLkB,KAAK,UACLG,QAAQ,CACJR,KAAKO,EAAKE,kBAAkBC,UAC5BC,GAAGJ,EAAKE,kBAAkBG,QAC1BC,MAAMN,EAAKE,kBAAkBK,cARtC,gDAYClC,EAAkB,KAAEmC,OAZrB,yDAAP,yDCD6E,aCL7DC,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2D,2BChBSC,cAAgB,CAC3B/B,KCHW,WAAkC,IAAjCE,EAAgC,uDAA1B,CAACQ,UAAS,GAAOsB,EAAS,uCAC5C,OAAOA,EAAOhB,MACV,IAAK,UACD,OAAO,aAACN,UAAS,GAAQsB,EAAOb,SACpC,IAAK,WACD,MAAO,CAACT,UAAS,GACrB,QACI,OAAOR,MCQV,IAAI+B,SAAQ,SAACC,EAAIC,GACtBxC,OAAOS,KAAKC,KAAK,gBAAe,WAC9BV,OAAOS,KAAKE,MAAMC,KAAK,CACrBC,UAAU,2EACVC,MAAM,YACL2B,MAAK,kBAAIF,GAAI,YAIfE,MAAK,WACVC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOC,YAAYC,EAAYC,YAAQC,YAAgBC,KAAOjD,OAAOkD,8BAAgClD,OAAOkD,kCACpH,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,YHoGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLjC,QAAQiC,MAAMA,EAAM6B,c","file":"static/js/main.5497eda3.chunk.js","sourcesContent":["const handleSignInError = err=>{\r\n    console.log(err)\r\n    switch(err){\r\n      case 'popup_closed_by_user':\r\n        window.alert('Sign In for Continue');\r\n        break;\r\n      case 'access_denied':\r\n        window.alert('Detail Required for Reference');\r\n        break;\r\n      case 'popup_blocked_by_browser':\r\n        window.alert('allow popup for sign-in with google');\r\n        break;\r\n      default:\r\n        window.alert('System Error')\r\n        break;\r\n    }\r\n  }\r\nexport const signIn = ()=>{\r\n    return async dispatch=>{\r\n        try {\r\n            let user = await window.gapi.auth2.getAuthInstance().signIn();\r\n            dispatch({\r\n                type:'SIGN_IN',\r\n                payload:{\r\n                    Name:user.getBasicProfile().getName(),\r\n                    Id:user.getBasicProfile().getId(),\r\n                    Email:user.getBasicProfile().getEmail(),\r\n                }\r\n            });\r\n        } catch (e) {\r\n            handleSignInError(e.error)\r\n        }\r\n    }\r\n}\r\n\r\nexport const signOut = ()=>{\r\n    return async dispatch=>{\r\n        await window.gapi.auth2.getAuthInstance().signOut();\r\n        dispatch({\r\n            type:'SIGN_OUT',\r\n        });\r\n    }\r\n}","import React,{useEffect} from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { signIn,signOut } from \"./actions/auth\";\r\nfunction App() {\r\n  let dispatch = useDispatch();\r\n  let auth = useSelector(state=>state).auth;\r\n  useEffect(()=>{\r\n    window.gapi.load('client:auth2',()=>{\r\n      window.gapi.auth2.init({\r\n        client_id:'210767855072-cratf6e4jb79atmqb11880oaigapoiih.apps.googleusercontent.com',\r\n        scope:'profile'\r\n      })\r\n    });\r\n  },[]);\r\n  return (\r\n    <div>\r\n      {auth.isSignIn?'Welcome '+auth.Name:''}\r\n      {auth.isSignIn?<button onClick={()=>dispatch(signOut())}>Sign Out</button>:<button onClick={()=>dispatch(signIn())}>Sign In</button>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport AuthReducer from \"./auth\";\r\nexport default combineReducers({\r\n    auth:AuthReducer\r\n})","export default (state={isSignIn:false},action)=>{\r\n    switch(action.type){\r\n        case 'SIGN_IN':\r\n            return {isSignIn:true,...action.payload};\r\n        case 'SIGN_OUT':\r\n            return {isSignIn:false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { createStore,compose,applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport RootReducer from \"./reducers\";\r\n\r\n\r\n\r\nconst init = ()=>{\r\n  return new Promise((res,rej)=>{\r\n    window.gapi.load('client:auth2',()=>{\r\n      window.gapi.auth2.init({\r\n        client_id:'210767855072-cratf6e4jb79atmqb11880oaigapoiih.apps.googleusercontent.com',\r\n        scope:'profile'\r\n      }).then(()=>res(true));\r\n    });\r\n  })\r\n}\r\ninit().then(()=>{\r\n  ReactDOM.render(\r\n    <Provider store={createStore(RootReducer,compose(applyMiddleware(thunk),window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()))}>\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n  );\r\n});\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}